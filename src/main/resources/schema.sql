-- Создание таблицы users
CREATE TABLE IF NOT EXISTS users (
                       user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       login VARCHAR NOT NULL,
                       name VARCHAR NOT NULL,
                       email VARCHAR NOT NULL,
                       birthday TIMESTAMP NOT NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS USER_EMAIL_UINDEX ON users (email);

CREATE UNIQUE INDEX IF NOT EXISTS USER_LOGIN_UINDEX ON users (login);

-- Создание таблицы friendship
CREATE TABLE IF NOT EXISTS friendship (
                            followed_user_id INTEGER NOT NULL,
                            following_user_id INTEGER NOT NULL,
                            friendship_status BOOLEAN NOT NULL,
                            PRIMARY KEY (followed_user_id, following_user_id),
                            FOREIGN KEY (followed_user_id) REFERENCES users(user_id) ON DELETE CASCADE,
                            FOREIGN KEY (following_user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Создание таблицы mpa_rating
CREATE TABLE IF NOT EXISTS mpa_rating (
    rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR NOT NULL
);

-- Создание таблицы films
CREATE TABLE IF NOT EXISTS films (
                       film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       name VARCHAR NOT NULL,
                       description VARCHAR(200) NOT NULL,
                       release_date TIMESTAMP NOT NULL,
                       duration INTEGER NOT NULL,
                       rating_id INTEGER,
                       FOREIGN KEY (rating_id) REFERENCES mpa_rating(rating_id)
);

-- Создание таблицы genre
CREATE TABLE IF NOT EXISTS genre (
                       genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       name VARCHAR NOT NULL
);

-- Создание таблицы films_genre
CREATE TABLE IF NOT EXISTS films_genre (
                             film_id INTEGER NOT NULL,
                             genre_id INTEGER NOT NULL,
                             PRIMARY KEY (film_id, genre_id),
                             FOREIGN KEY (film_id) REFERENCES films(film_id) ON DELETE CASCADE,
                             FOREIGN KEY (genre_id) REFERENCES genre(genre_id) ON DELETE CASCADE
);

-- Создание таблицы liked_films
CREATE TABLE IF NOT EXISTS liked_films (
                             film_id INTEGER NOT NULL,
                             user_id INTEGER NOT NULL,
                             PRIMARY KEY (film_id, user_id),
                             FOREIGN KEY (film_id) REFERENCES films(film_id) ON DELETE CASCADE,
                             FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);